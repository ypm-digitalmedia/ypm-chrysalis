<?php

/**
 * @file
 * Functions to support theming in the beginning theme.
 */

use Drupal\node\NodeInterface;
use Drupal\node\Entity\Node;
use Drupal\Core\Render\Element;
use Drupal\taxonomy\Entity\Term;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\media\Entity\Media;
use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;
use Drupal\media_entity\MediaInterface;
use Drupal\file\Entity;

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 */

function chrysalis_preprocess_page(&$variables)
{
    // ORIGINAL CODE
    // Add information about the number of sidebars.
    /*
    if (!empty($variables['page']['sidebar_first']) && !empty($variables['page']['sidebar_second'])) {
        $variables['contentwidth'] = 'col-md-5 col-md-push-4';
        $variables['sidebarfw'] = 'col-md-4 col-md-pull-5';
        $variables['sidebarsw'] = 'col-md-3';
    } elseif (!empty($variables['page']['sidebar_first'])) {
        $variables['contentwidth'] = 'col-md-8 col-md-push-4';
        $variables['sidebarfw'] = 'col-md-4 col-md-pull-8';
    } elseif (!empty($variables['page']['sidebar_second'])) {
        $variables['contentwidth'] = 'col-md-8';
        $variables['sidebarsw'] = 'col-md-4';
    } else {
        $variables['contentwidth'] = 'col-md-12';
    }
    */

        if (($node = \Drupal::routeMatch()->getParameter('node_preview')) && $node instanceof NodeInterface) {
          $variables['node_type'] = $node->getType();
        }

}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 */
function chrysalis_theme_suggestions_block_alter(array &$suggestions, array $variables)
{
    $block = $variables['elements'];
    $blockType = $block['#configuration']['provider'];

    if ($blockType == "block_content") {
        $bundle = $block['content']['#block_content']->bundle();
        $suggestions[] = 'block__' . $bundle;
    }

}

function chrysalis_preprocess_node(array &$variables) {
    // $node = $variables['node'];

    // $variables['ref'] = $node->get('tags')-referencedEntities();

    // $variables['t_entities'] = [
    //     'division_t' => $node->field_division_t->entity,
    //     'department_t' => $node->field_department_t->entity
    // ];

    // $variables['entities'] = $node->get($field)->referencedEntities(); 

    // if (!$node->field_division == null ) {
    //     $variables['entities_t']['division_t'] = $node->field_division->entity;
    // }
    // if (!$node->field_department_t == null) {
    //     $variables['entities_t']['department_t'] = $node->field_department_t->entity;
    // }
    
    // $entity_id = $node->get('field_division_t')->first()->getValue()['target_id'];

    // switch ($node->getType()) {
    //     case "slider":
    //         if( !$node->field_slider_format == null ) { 
    //             $variables['sliderFormat'] = $node->field_slider_format->value;
    //         } else {
    //             $variables['sliderFormat'] = "default";
    //         }
    //         break;
    //     default:
    //         $variables['sliderFormat'] = null;
    // }

}

/**
 * Implements hook_preprocess_paragraph().
 * @param $variables
 */
function chrysalis_preprocess_paragraph(&$variables) {
    $variables['is_front'] = Drupal::service('path.matcher')->isFrontPage();

    // Ensure the cache varies correctly.
    // Drupal 8.2.x or lower
    $variables['#cache']['contexts'][] = 'url.path';

    // Ensure the cache varies correctly.
    // Drupal 8.3.x+
    $variables['#cache']['contexts'][] = 'url.path.is_front';

    $node = \Drupal::request()->attributes->get('node');
    // $variables['nodetitle'] = $node->getTitle();
    $variables['node'] = $node;
    // $ref = $node->field_paragraphs_content->referencedEntities();


    $paragraph = $variables['paragraph'];
    // hotfix to grab content from type=staff which match taxonomy terms
    // division_t and department_t references
    // super ghetto
    if (!$paragraph->field_select_staff_group == null ) {
        $tid = $paragraph->get('field_select_staff_group')->first()->getValue()['target_id'];
        $theTerm = Term::load($tid);
        // get the vocabulary name ('division'|'department')
        $group_type = $theTerm->bundle();
        $variables['group_type'] = $group_type;

        //cosmetic
        $showSgt = (bool)$paragraph->field_include_standard_group_tit->value;
        if( $showSgt ) { $showTitle = true; } else { $showTitle = false; }
        $showBottomHr = (bool)$paragraph->field_include_bottom_separator->value;
        $variables['show_group_title'] = $showTitle;
        $variables['show_group_bottom_hr'] = $showBottomHr;

        // $term_nodes = getNodesByTid($tid);
        $term_nodes = getNodesByTid($tid);

        $refcontent = array();
        foreach( $term_nodes as $nodeobj ) {
            // create container for each reference node
            $ref = array();
            // grab values
            $active = $nodeobj->field_status->value;
            // $staff_type = $nodeobj->field_staff_type;
            $senior_staff = $nodeobj->field_senior_staff->value;
            $board_of_curators = $nodeobj->field_board_of_curators->value;
            $first_name = $nodeobj->field_first_name->value;
            $last_name = $nodeobj->field_last_name->value;
            
            $photo = $nodeobj->field_photo->entity;
            
            $department_t = $nodeobj->field_department_t->entity;
            $division_t = $nodeobj->field_division_t->entity;
            $hasDept = !empty($department_t);
            $hasDiv = !empty($division_t);
            
            if( $hasDept ) {
                $dept_term = \Drupal\taxonomy\Entity\Term::load($nodeobj->get('field_department_t')->target_id);
                $department_t = $dept_term->name->value;
            }
            if( $hasDiv ) {
                $div_term = \Drupal\taxonomy\Entity\Term::load($nodeobj->get('field_division_t')->target_id);
                $division_t = $div_term->name->value;
            }
            // endfix
            
            $collections_position = $nodeobj->field_collections_position->value;
            $admin_position = $nodeobj->field_administration_position->value;

            $phone_area_code = $nodeobj->field_phone_area_code->value;
            $phone_prefix = $nodeobj->field_phone_prefix->value;
            $phone_suffix = $nodeobj->field_phone_suffix->value;
            $phone_extension = $nodeobj->field_phone_extension->value;
            $email_address = $nodeobj->field_email_address->value;
            $website = array(
                'title' => $nodeobj->field_website->title,
                'uri' => $nodeobj->field_website->uri
            );
            $office_location = $nodeobj->field_office_location->value;

            $ref['affiliation'] = array(
                'collections' => $hasDiv,
                'administration'=> $hasDept
            );

            // send values to twig template
            $ref['field_active'] = (bool)$active;
            // $ref['field_staff_type'] = $staff_type;
            $ref['field_senior_staff'] = (bool)$senior_staff;
            $ref['field_board_of_curators'] = (bool)$board_of_curators;
            $ref['field_first_name'] = $first_name;
            $ref['field_last_name'] = $last_name;
            $ref['photo'] = $photo;
            $ref['field_department_t'] = $department_t;
            $ref['field_division_t'] = $division_t;
            $ref['field_collections_position'] = $collections_position;
            $ref['field_administration_position'] = $admin_position;
            $ref['field_phone_area_code'] = $phone_area_code;
            $ref['field_phone_prefix'] = $phone_prefix;
            $ref['field_phone_suffix'] = $phone_suffix;
            $ref['field_phone_extension'] = $phone_extension;
            $ref['field_email_address'] = $email_address;
            $ref['field_website'] = array(
                'uri' => $website['uri'],
                'title' => $website['title']
            );
            $ref['field_office_location'] = $office_location;
            array_push($refcontent,$ref);
        }

        // now we have to sort refcontent.
        // 1. senior staff DESC
        // 2. board of curators DESC
        // 3. last name ASC
        
        # get a list of sort columns and their data to pass to array_multisort
        $sort = array();
        foreach($refcontent as $k=>$v) {
            $sort['field_last_name'][$k] = $v['field_last_name'];
            $sort['field_board_of_curators'][$k] = $v['field_board_of_curators'];
            $sort['field_senior_staff'][$k] = $v['field_senior_staff'];
        }
        # sort by above columns
        array_multisort($sort['field_senior_staff'], SORT_DESC, $sort['field_board_of_curators'], SORT_DESC, $sort['field_last_name'], SORT_ASC, $refcontent);

        $variables['refcontent'] = $refcontent;
        $variables['term_nodes'] = $term_nodes;
        $variables['tid'] = (int)$tid;
    }
}


// function chrysalis_preprocess_taxonomy_term(&$variables) {
    // $variables['view_mode'] = $variables['elements']['#view_mode'];
    // $variables['term'] = $variables['elements']['#taxonomy_term'];
  
    // /** @var \Drupal\taxonomy\TermInterface $term */
    // $term = $variables['term'];
    // $variables['url'] = $term
    //   ->url();
  
    // // We use name here because that is what appears in the UI.
    // $variables['name'] = $variables['elements']['name'];
    // unset($variables['elements']['name']);
    // $variables['page'] = $variables['view_mode'] == 'full' && taxonomy_term_is_page($term);
  
    // // Helpful $content variable for templates.
    // $variables['content'] = array();
    // foreach (Element::children($variables['elements']) as $key) {
    //   $variables['content'][$key] = $variables['elements'][$key];
    // }
//   }




// function chrysalis_preprocess_views_view_list(&$variables) {
//     $view = $variables['view'];
//     $id = $view->storage->id();
//     $rows = $variables['rows'];
//     foreach ($rows as $rowId => $row) {
//         foreach ($view->field as $fieldId => $field) {
//             $field_output = $view->style_plugin->getFieldValue($rowId, $fieldId);
//             print_r($view->field[$fieldId]->label());
//             print_r($field_output);
            
//             }
//         }
//     }

function getNodesByTid($tid) {
    if(empty($tid)){
        return NULL;
    }
    $query = \Drupal::database()->select('taxonomy_index', 'ti');
    $query->fields('ti', array('nid'));
    $query->condition('ti.tid', $tid, 'IN');
    // $query->orderBy('field_senior_staff', 'DESC')->orderBy('field_board_of_curators', 'DESC')->orderBy('field_last_name', 'ASC');
    $query->distinct(TRUE);
    $result = $query->execute();
    if($nodeIds = $result->fetchCol()){
        return Node::loadMultiple($nodeIds);
    }
    return NULL;
}

/**
 * custom script for owl carousel - provide new variables to build slider manually ( img -> div w/css bg img )
 */
function chrysalis_preprocess_owl(&$variables) {
    
    if ($node = \Drupal::routeMatch()->getParameter('node_preview')) {
        $node = \Drupal::routeMatch()->getParameter('node_preview');
    } else { 
        $node = \Drupal::routeMatch()->getParameter('node');
    }
    $variables['node'] = $node;

    $items = $variables['items'];
  
    $settings = _owl_format_settings($variables['settings']);
  
    $variables['attributes']['class'][] = 'owl-slider-wrapper';
    $variables['attributes']['class'][] = 'owl-carousel';
    $variables['attributes']['data-settings'] = json_encode($settings);
  
    $html = '';
    
    $item_data = array();
    if (!empty($items)) {
      $i = 0;
      foreach ($items as $item) {
        $html .= '<div class="owl-item-inner owl-item-inner' . $i . '">' . render($item) . '</div>';
        $i++;
      }
    }
    $output = array(
      '#type' => 'markup',
      '#markup' => $html,
    );
    $imagesContent = array();
    
    // CUSTOM LOGIC
    // differentiate between 'slider' content type and all else
    // sliders can be included in other pages as entity references
    // 'slider' content type has fields field_slider_caption & field_slide_text_overlays
    // nodes which reference sliders must fetch these fields alternatively.

    // ------------------------------------------------------
    // begin custom - images
    // ------------------------------------------------------
    switch ($node->getType()) {
        case "slider":
            $theImages = $node->field_slider_images;
        break;
        case "collections_division":
            $theImages = $node->field_select_slider_images->entity->field_slider_images;
        break;
        // case "basic_page":
        //     $theImages = $node->field_select_slider_images->entity->field_slider_images;
        // break;
        // case "event":
        //     $theImages = $node->field_select_slider_images->entity->field_slider_images;
        // break;
        // case "webform":
        //     $theImages = $node->field_select_slider_images->entity->field_slider_images;
        // break;
        default:
            $theImages = $node->field_select_slider_images->entity->field_slider_images;
    }

    foreach ($theImages as $image) {
        array_push($imagesContent,$image->getValue());
    }
    // ------------------------------------------------------
    // end custom
    // ------------------------------------------------------

    foreach( $imagesContent as $index=>&$imageData ) {
        $fid = $imageData['target_id'];
        $file = File::load($fid);
        $url = $file->url();
        
        $imageData['url'] = $url;
    }
    unset($imageData);

    $variables['images'] = $imagesContent;


    // ------------------------------------------------------
    // begin custom - other metadata
    // ------------------------------------------------------
    switch ($node->getType()) {
        case "slider":
            $variables['caption'] = $node->field_slider_caption->getString();
            $variables['overlays'] = $node->field_slide_text_overlays[0]->value;
            $variables['overlayStyle'] = $node->field_slide_text_overlay_style->value;
            $variables['sliderFormat'] = $node->field_slider_format->value;
            break;
        case "collections_division":
            $variables['caption'] = $node->field_select_slider_images->entity->field_slider_caption->getString();
            $variables['overlays'] = $node->field_select_slider_images->entity->field_slide_text_overlays[0]->value;
            $variables['overlayStyle'] = $node->field_select_slider_images->entity->field_slide_text_overlay_style->value;
            $variables['sliderFormat'] = $node->field_select_slider_images->entity->field_slider_format->value;
            break;
        default:
            $variables['caption'] = $node->field_select_slider_images->entity->field_slider_caption->getString();
            $variables['overlays'] = $node->field_select_slider_images->entity->field_slide_text_overlays[0]->value;
            $variables['overlayStyle'] = $node->field_select_slider_images->entity->field_slide_text_overlay_style->value;
            $variables['sliderFormat'] = $node->field_select_slider_images->entity->field_slider_format->value;
    }

    if( !$variables['overlayStyle'] ) {
        $variables['overlayStyle'] = "light"; 
    }

    // if( isset( $node->field_slider_caption) ) {
    //     $variables['caption'] = $node->field_slider_caption->getString();
    // } else {
    //     $variables['caption'] = "";
    // }

    // if( isset($node->field_slide_text_overlays) ) {
    //     $variables['overlays'] = $node->field_slide_text_overlays[0]->value;
    // } else {
    //     $variables['overlays'] = 0;
    // }

    // ------------------------------------------------------
    // end custom
    // ------------------------------------------------------

    $variables['nodetype'] = $node->getType();
    $variables['items'] = $item_data;

    $variables['output'] = render($output);
  }


?>