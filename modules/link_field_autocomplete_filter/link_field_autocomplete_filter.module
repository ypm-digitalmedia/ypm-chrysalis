<?php

/**
 * @file
 * Contains link_field_autocomplete_filter.module.
 */

use Drupal\Core\Config\Entity\ThirdPartySettingsInterface;
use Drupal\Core\Entity\Element\EntityAutocomplete;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\Entity\Node;
use Drupal\node\Entity\NodeType;

/**
 * Implements hook_help().
 */
function link_field_autocomplete_filter_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the link_field_autocomplete_filter module.
    case 'help.page.link_field_autocomplete_filter':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Currently the autocomplete in Link Field widgets always shows content suggestions from all content (node) types.') . '</br>';
      $output .= t('This module adds a Link Field configuration for filtering the suggested content types in the autocomplete field.') . '</p>';
      $output .= '<h3>' . t('Configuration') . '</h3>';
      $output .= '<ul>';
      $output .= '<li>' . t('Simply activate the module, and a series of checkboxes (one for each content type) will appear in the configuration form of your Link Field field-instances.') . '</li>';
      $output .= '<li>' . t('If you check none, then all content types will appear as suggestions in the autocomplete field. Otherwise only those checked will appear.') . '</li>';
      $output .= '<li>' . t('If you change the field settings later, the field will be validated for the new allowed content types.') . '</li>';
      $output .= '</ul>';
      $output .= '<h3>' . t('Online Help') . '</h3>';
      $output .= '<a href="https://www.drupal.org/project/link_field_autocomplete_filter" target="_blank">' . t('Link Field Autocomplete Filter') . '</a>';
      return $output;

    default:
  }
  return '';
}

/**
 * Implements hook_form__BASE_FORM_ID_alter().
 */
function link_field_autocomplete_filter_form_field_config_edit_form_alter(&$form, FormStateInterface $form_state) {
  $entity = $form_state->getFormObject()->getEntity();
  if ($entity->get('field_type') == 'link') {
    $form['third_party_settings']['link_field_autocomplete_filter'] = [
      '#type' => 'fieldset',
      '#collapsible' => FALSE,
      '#title' => t('Autocomplete Filter'),
    ];

    // Do negate the selection.
    $negate = $entity->getThirdPartySetting('link_field_autocomplete_filter', 'negate', NULL);
    $form['third_party_settings']['link_field_autocomplete_filter']['negate'] = [
      '#type' => 'radios',
      '#options' => [
        0 => t('Include the selected below'),
        1 => t('Exclude the selected below'),
      ],
      '#title' => t('Which content types should be allowed for internal links?'),
      '#default_value' => $negate,
    ];

    $bundles = $entity->getThirdPartySetting('link_field_autocomplete_filter', 'allowed_content_types', NULL);
    $form['third_party_settings']['link_field_autocomplete_filter']['allowed_content_types'] = [
      '#type' => 'checkboxes',
      '#title' => t('Content types'),
      '#description' => t('If none are checked, then all are allowed.'),
      '#options' => _link_field_autocomplete_content_types_options(TRUE),
      '#default_value' => is_array($bundles) ? $bundles : [],
    ];
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function link_field_autocomplete_filter_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  $widget_type = $context['widget']->getPluginId();
  if ($widget_type === 'link_default' || $widget_type === 'link_attributes' || $widget_type === 'link_target_field_widget') {
    $fieldDefinitions = $context['items']->getFieldDefinition();
    if (!$fieldDefinitions || !($fieldDefinitions instanceof ThirdPartySettingsInterface)) {
      return;
    }

    $configs = $fieldDefinitions->getThirdPartySetting('link_field_autocomplete_filter', 'allowed_content_types');
    $settings = is_array($configs) ? $configs : [];
    $bundles = array_filter($settings);
    // Only alter and validate if a value is set.
    if (count($bundles) > 0) {
      $negate = $fieldDefinitions->getThirdPartySetting('link_field_autocomplete_filter', 'negate', NULL);
      if (!is_null($negate) && $negate == '1') {
        $bundles = array_diff_key(_link_field_autocomplete_content_types_options(FALSE), $bundles);
      }

      $element['uri']['#selection_handler'] = 'default:node';
      $element['uri']['#selection_settings'] = [
        'target_bundles' => $bundles,
      ];
      if (is_array($element['uri']['#element_validate'])) {
        $element['uri']['#element_validate'][] = '_link_field_autocomplete_filter_validate_widget';
      }
      else {
        $element['uri']['#element_validate'] = ['_link_field_autocomplete_filter_validate_widget'];
      }
    }
  }
}

/**
 * Validate for allowed node types (in case the user changes the field settings)
 */
function _link_field_autocomplete_filter_validate_widget($element, FormStateInterface $form_state, $form) {
  $entity_id = EntityAutocomplete::extractEntityIdFromAutocompleteInput($element['#value']);
  // Allowed bundles will always be set,
  // see link_field_autocomplete_filter_field_widget_link_default_form_alter.
  $allowed_bundles = $element['#selection_settings']['target_bundles'];
  // $entity_id will be empty,
  // if the user entered a manual url in the link field.
  if (!empty($entity_id)) {
    $node = Node::load($entity_id);
    if (!empty($node)) {
      $node_type = $node->getType();
      if (!in_array($node_type, $allowed_bundles)) {
        $form_state->setError($element, t('This node: %id (type %type) cannot be referenced.', [
          '%type' => $node_type,
          '%id' => $entity_id,
        ]));
      }
    }
  }
}

/**
 * Return the list of all content types as options.
 *
 * @return array
 *   An options array.
 */
function _link_field_autocomplete_content_types_options($label = TRUE) {
  $options = [];

  $node_types = NodeType::loadMultiple();
  foreach ($node_types as $node_type) {
    $options[$node_type->id()] = $label ? $node_type->label() : $node_type->id();
  }

  return $options;
}
