<?php

/**
 * @file
 * Adds checkout button.
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\entity\BundleFieldDefinition;
use Drupal\views\Form\ViewsForm;

/**
 * Implements hook_help().
 */
function bigcommerce_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.bigcommerce':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The BigCommerce module allows users to integrate with <a href=":bigcommerce">BigCommerce</a>.', [':bigcommerce' => 'https://www.bigcommerce.com/']) . '</p>';
      $output .= '<p>' . t('The module will allow you to leverage the obvious strengths of each platform: Drupal as the front-end CMS for customized UX, design, and content management (including display of intended BC content), and BigCommerce as the headless commerce engine. For more information, see the <a href=":documentation">online documentation for the BigCommerce module</a>.</p>', [':documentation' => 'https://www.drupal.org/docs/8/modules/bigcommerce']) . '</p>';

      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Synchronizing products') . '</dt>';
      $output .= '<dd>' . t('Products can be maintained in BigCommerce and <a href=":sync">synchronized</a> to your Drupal site.', [':sync' => Url::fromRoute('bigcommerce.product_sync')->toString()]) . '</dd>';
      $output .= '<dt>' . t('Cart and checkout') . '</dt>';
      $output .= '<dd>' . t('BigCommerce products can be added to the cart and then checkout will proceed via BigCommerce using iframes.') . '</dd>';
      $output .= '</dl>';
      return $output;

    case 'bigcommerce.product_sync':
      $output = '<p>' . t('This form can manually import products from BigCommerce. To set this up to happen automatically, use the Drush commands included with the Migrate tools module. For example, configuring <code>drush migrate:import --group bigcommerce</code> to run on cron will import all new products and make any necessary updates.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_form_alter().
 */
function bigcommerce_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_state->getFormObject() instanceof ViewsForm) {
    /** @var \Drupal\views\ViewExecutable $view */
    $view = reset($form_state->getBuildInfo()['args']);
    // Only add the Checkout button if the cart form view has order items.
    if ($view->storage->get('tag') == 'commerce_cart_form' && !empty($view->result)) {
      $form['actions']['checkout'] = [
        '#type' => 'submit',
        '#value' => t('Checkout'),
        '#weight' => 5,
        // Not sure how we should handle permissions, mimic commerce?
        // '#access' => \Drupal::currentUser()->hasPermission('access checkout'),
        '#submit' => array_merge($form['#submit'], ['bigcommerce_order_item_views_form_submit']),
        '#order_id' => $view->argument['order_id']->value[0],
        '#update_cart' => TRUE,
        '#show_update_message' => FALSE,
      ];
    }
  }
}

/**
 * Submit handler used to redirect to the BigCommerce embedded checkout page.
 */
function bigcommerce_order_item_views_form_submit($form, FormStateInterface $form_state) {
  $order_id = $form_state->getTriggeringElement()['#order_id'];
  $form_state->setRedirect('bigcommerce.checkout', ['commerce_order' => $order_id]);
}

/**
 * Implements hook_entity_bundle_field_info().
 */
function bigcommerce_entity_bundle_field_info(EntityTypeInterface $entity_type, $bundle, array $base_field_definitions) {
  $definitions = [];
  if ($entity_type->id() === 'taxonomy_term' && in_array($bundle, ['bigcommerce_product_category', 'bigcommerce_product_brand'])) {
    $definitions['bigcommerce_id'] = BundleFieldDefinition::create('bigcommerce_id')
      ->setLabel(t('BigCommerce ID'))
      ->setComputed(TRUE)
      ->setSetting('bigcommerce_sync', [
        'plugin' => $bundle,
        'id' => 'tid',
      ]);
  }
  elseif ($entity_type->id() === 'commerce_product') {
    $manager = \Drupal::service('plugin.manager.migration');
    /** @var \Drupal\migrate\Plugin\Migration $type_migration */
    $type_migration = $manager->createInstance('bigcommerce_product_type');
    if ($type_migration->getIdMap()->lookupSourceId(['id' => $bundle])) {
      $definitions['bigcommerce_id'] = BundleFieldDefinition::create('bigcommerce_id')
        ->setLabel(t('BigCommerce ID'))
        ->setComputed(TRUE)
        ->setSetting('bigcommerce_sync', [
          'plugin' => 'bigcommerce_product',
          'id' => 'product_id',
        ]);
    }
  }
  elseif ($entity_type->id() === 'commerce_product_variation') {
    $manager = \Drupal::service('plugin.manager.migration');
    /** @var \Drupal\migrate\Plugin\Migration $type_migration */
    $type_migration = $manager->createInstance('bigcommerce_product_variation_type');
    if ($type_migration->getIdMap()->lookupSourceId(['id' => $bundle])) {
      $definitions['bigcommerce_id'] = BundleFieldDefinition::create('bigcommerce_id')
        ->setLabel(t('BigCommerce ID'))
        ->setComputed(TRUE)
        ->setSetting('bigcommerce_sync', [
          'plugin' => 'bigcommerce_product_variation',
          'id' => 'variation_id',
        ]);
    }
  }
  return $definitions;
}

/**
 * Implements hook_modules_installed().
 */
function bigcommerce_modules_installed($modules) {
  // Note that via the UI we prevent BigCommerce being installed if Commerce
  // Checkout already is. But it is impossible to do this the other way around
  // and Drush also ignores hook_requirements.
  // @see https://github.com/drush-ops/drush/issues/3669
  if (\Drupal::moduleHandler()->moduleExists('commerce_checkout')) {
    \Drupal::messenger()->addError(
      t("BigCommerce provides its own checkout functionality which conflicts with Commerce Checkout. Ensure Commerce Checkout is uninstalled before using BigCommerce.")
    );
  }
}
